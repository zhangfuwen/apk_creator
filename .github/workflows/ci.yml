name: Build and Release

on:
  push:
    branches:
      - '**'  # Run on any branch push
    tags:
      - 'v*'  # Run only when a version tag like v1.0.0 is pushed

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Required for git describe in later steps

      - name: Build APK
        run: |
          bash build.sh -d

      - name: Upload APK Artifact (on all pushes)
        if: github.ref != 'refs/tags/v*'
        uses: actions/upload-artifact@v4
        with:
          name: app-signed.apk
          path: build/apk/app-signed.apk
          retention-days: 7

      # - name: Create Release (on tag push)
      #   if: startsWith(github.ref, 'refs/tags/v')
      #   uses: softprops/action-merge-request@v1
      #   with:
      #     token: ${{ secrets.GITHUB_TOKEN }}
          # Use action-gh-release instead of merge-request for proper release creation
        # Instead, use a dedicated release action:
        # We'll switch to `release` action below
      - name: Create Release
        # You may pin to the exact commit or the version.
        # uses: ncipollo/release-action@b7eabc95ff50cbeeedec83973935c8f306dfcd0b
        if: startsWith(github.ref, 'refs/tags/v')
        uses: ncipollo/release-action@v1.20.0
        with:
          # # An optional flag which indicates if we should update a release if it already exists. Defaults to false.
          # allowUpdates: # optional, default is 
          # # An optional flag which indicates if artifact read or upload errors should fail the build.
          # artifactErrorsFailBuild: # optional, default is 
          # An optional set of paths representing artifacts to upload to the release. This may be a single path or a comma delimited list of paths (or globs)
          artifact: build/apk/app-signed.apk
          # optional, default is 
          # An optional set of paths representing artifacts to upload to the release. This may be a single path or a comma delimited list of paths (or globs)
          # artifacts: # optional, default is 
          # # The content type of the artifact. Defaults to raw
          # artifactContentType: # optional, default is 
          # # An optional body for the release.
          # body: # optional, default is 
          # # An optional body file for the release. This should be the path to the file
          # bodyFile: # optional, default is 
          # # An optional commit reference. This will be used to create the tag if it does not exist.
          # commit: # optional, default is 
          # # When provided this will generate a discussion of the specified category. The category must exist otherwise this will cause the action to fail. This isn't used with draft releases
          # discussionCategory: # optional, default is 
          # # Optionally marks this release as a draft release. Set to true to enable.
          # draft: # optional, default is 
          # # Indicates if release notes should be automatically generated.
          # generateReleaseNotes: # optional, default is false
          # # An optional previous tag to use when generating release notes. This will limit the release notes to changes between the two tags.
          # generateReleaseNotesPreviousTag: # optional, default is 
          # # Indicates if immutable release creation should be used. When enabled, the action will first create a draft, upload artifacts, then publish the release.
          # immutableCreate: # optional, default is false
          # # Indicates if the release should be the "latest" release or not.
          # makeLatest: # optional, default is legacy
          # # An optional name for the release. If this is omitted the tag will be used.
          # name: # optional, default is 
          # # Indicates if the release body should be omitted.
          # omitBody: # optional, default is false
          # # Indicates if the release body should be omitted during updates. The body will still be applied for newly created releases. This will preserve the existing body during updates.
          # omitBodyDuringUpdate: # optional, default is false
          # # Indicates if the draft flag should be omitted during updates. The draft flag will still be applied for newly created releases. This will preserve the existing draft state during updates.
          # omitDraftDuringUpdate: # optional, default is false
          # # Indicates if the release name should be omitted.
          # omitName: # optional, default is false
          # # Indicates if the release name should be omitted during updates. The name will still be applied for newly created releases. This will preserve the existing name during updates.
          # omitNameDuringUpdate: # optional, default is false
          # # Indicates if the prerelease flag should be omitted during updates. The prerelease flag will still be applied for newly created releases. This will preserve the existing prerelease state during updates.
          # omitPrereleaseDuringUpdate: # optional, default is false
          # # Optionally specify the owner of the repo where the release should be generated. Defaults to current repo's owner.
          # owner: # optional, default is 
          # # Optionally marks this release as prerelease. Set to true to enable.
          # prerelease: # optional, default is 
          # # Indicates if existing release artifacts should be removed, Defaults to false.
          # removeArtifacts: # optional, default is false
          # # Indicates if existing release artifacts should be replaced. Defaults to true.
          # replacesArtifacts: # optional, default is true
          # # Optionally specify the repo where the release should be generated. Defaults to current repo
          # repo: # optional, default is 
          # # When skipIfReleaseExists is enabled the action will be skipped if a non-draft release already exists for the provided tag.
          # skipIfReleaseExists: # optional, default is false
          # # An optional tag for the release. If this is omitted the git ref will be used (if it is a tag).
          # tag: # optional, default is 
          # # The Github token.
          # token: # optional, default is ${{ github.token }}
          # # When allowUpdates is enabled, this will fail the action if the release it is updating is not a draft or a prerelease.
          # updateOnlyUnreleased: # optional, default is false
          

      # ðŸ”¥ Correct approach: Use `marvinpinto/action-automatic-releases` or similar
      - name: Create Release (on tag push)
        if: startsWith(github.ref, 'refs/tags/v')
        uses: marvinpinto/action-automatic-releases@latest
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          prerelease: false
          files: |
            build/apk/app-signed.apk
          title: Release ${{ github.ref_name }}
          body: |
            This is a release of the app.
            Uploaded from CI build.
          draft: false

      - name: Upload APK to Release 
        if: startsWith(github.ref, 'refs/tags/v')
        run: |
          # Optional: verify APK exists
          if [ ! -f "build/apk/app-signed.apk" ]; then
            echo "APK not found at build/apk/app-signed.apk"
            exit 1
          fi

          # Use GitHub CLI to upload asset to release
          gh release upload ${{ github.ref_name }} build/apk/app-signed.apk --clobber
